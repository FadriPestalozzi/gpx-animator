/*
 *  Copyright Contributors to the GPX Animator project.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'com.github.spotbugs' version '4.7.2'
    id 'pmd'
    id 'checkstyle'
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-platform' version '1.5.5'
}

version = '1.8.0-SNAPSHOT'
group = 'app.gpx-animator'

mainClassName = 'app.gpx_animator.Main'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
}

// We can set this on the command line, too: -PjavacppPlatform="linux-x86,linux-x86_64,macosx-x86_64,windows-x86,windows-x86_64"
ext {
    javacppPlatform = 'linux-x86,linux-x86_64,macosx-x86_64,windows-x86,windows-x86_64'
}

dependencies {
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.4.1'
    implementation 'org.bytedeco:javacv:1.5.5'
    implementation 'org.bytedeco:ffmpeg-platform-gpl:4.3.2-1.5.5'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'com.sun.xml.bind:jaxb-core:3.0.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.1'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'com.drewnoakes:metadata-extractor:2.16.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    implementation 'commons-io:commons-io:20030203.000550'
    implementation 'com.jgoodies:jgoodies-forms:1.9.0'
    implementation 'com.vladsch.flexmark:flexmark-all:0.62.2'
    implementation 'org.reflections:reflections:0.9.12'
    implementation 'org.apache.maven:maven-artifact:3.6.3'
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:4.4.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'org.junit.platform:junit-platform-engine:1.7.0'
}

test.classpath += configurations.developmentOnly
run.classpath += configurations.developmentOnly

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

task copyFiles(type: Copy) {
    from "."
    include "CHANGELOG.md", "LICENSE.md"
    into "./src/main/resources"
}

task deleteFiles(type: Delete) {
    delete "./src/main/resources/CHANGELOG.md", "./src/main/resources/LICENSE.md"
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'config/git/pre-push')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0755
}

test {
    useJUnitPlatform { }
    maxParallelForks = 4
    minHeapSize = "1G"
    maxHeapSize = "2G"
    dependsOn 'createVersionFile'
}

shadowJar {
    mergeServiceFiles()
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    configFile file("${projectDir}/config/checkstyle/checkstyle.xml")
    toolVersion "8.44"
}

pmd {
    toolVersion = "6.36.0"
    ruleSets = []
    ruleSetFiles = files("${projectDir}/config/pmd/pmd-rules.xml")
}

task createVersionFile {
    doLast {
        def version = project.version.toString()
        def file = new File("$buildDir/resources/main/version.txt")
        file.write(version)
    }
}

processResources.dependsOn copyFiles
clean.dependsOn deleteFiles
assemble.dependsOn check
check.dependsOn installGitHooks
jar.dependsOn createVersionFile
